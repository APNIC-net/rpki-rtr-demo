#!/usr/bin/perl

use warnings;
use strict;

use DateTime;
use File::Slurp qw(read_file write_file);

use APNIC::RPKI::RTR::Constants;
use APNIC::RPKI::RTR::Client;
use APNIC::RPKI::Validator::ASPA;
use APNIC::RPKI::Validator::ROA qw(ROV_INVALID ROV_UNKNOWN ROV_VALID);

sub usage
{
    print <<EOF;
rpki-rtr-client {data-directory} init --server {server} --port {port}
                                      [--version {version}] [--strict]
                                      [--tcp-md5-key {key}]
                                      [--ca-file {path}]
                                      [--cert-file {path} --key-file {path}]
                                      [--ssh-key {path}]
                                      [--known-hosts {path}]
                                      [--data-types {data-types}]

  Initialise a new client instance against the specified server.

rpki-rtr-client {data-directory} reset

  Reset the client's state as against the server.

rpki-rtr-client {data-directory} refresh [--force] [--persist]

  Retrieve any changes that have happened since the last
  synchronisation attempt.  If --persist is provided, the command will
  await further changes, writing them to disk as they are received
  for use with print.

rpki-rtr-client {data-directory} print

  Print the current state of the client.

rpki-rtr-client {data-directory} route-origin-validation --asn {asn} --prefix {prefix}

  Perform route origin validation on an announcement (ASN-prefix
  pair).

rpki-rtr-client {data-directory} aspa-validation --announcement {announcement}
                                                 --provider-asns {provider-asns}

  Perform ASPA validation on an announcement (in bgpdump one-line
  format) as received by an ASN with the specified set of provider
  ASNs.

EOF
}

sub error
{
    my ($error) = @_;

    print STDERR "$error\n";

    usage();

    exit(10);
}

sub main
{
    my ($dir, $op_name, @args) = @_;

    if (not $dir) {
        error("Data directory must be provided.");
    }
    if (not -d $dir) {
        my $res = mkdir $dir;
        if (not $res) {
            error("Unable to make directory: $!");
        }
    }

    if (not $op_name) {
        error("Operation name not provided.");
    } elsif ($op_name eq 'init') {
        my $server;
        my $port;
        my $tcp_md5_key;
        my $ca_file;
        my $cert_file;
        my $key_file;
        my $ssh_key;
        my $known_hosts;
        my @supported_versions;
        my $strict;
        my @data_types;
        while (@args) {
            my $key = shift @args;
            if ($key eq '--server') {
                $server = shift @args;
            } elsif ($key eq '--port') {
                $port = shift @args;
            } elsif ($key eq '--version') {
                my @versions = split /,/, (shift @args);
                push @supported_versions, @versions;
            } elsif ($key eq '--strict') {
                $strict = 1;
            } elsif ($key eq '--tcp-md5-key') {
                $tcp_md5_key = shift @args;
            } elsif ($key eq '--ca-file') {
                $ca_file = shift @args;
            } elsif ($key eq '--cert-file') {
                $cert_file = shift @args;
            } elsif ($key eq '--key-file') {
                $key_file = shift @args;
            } elsif ($key eq '--ssh-key') {
                $ssh_key = shift @args;
            } elsif ($key eq '--known-hosts') {
                $known_hosts = shift @args;
            } elsif ($key eq '--data-types') {
                my @current_data_types = split /,/, (shift @args);
                push @data_types, @current_data_types;
            } else {
                error("Invalid argument '$key'");
            }
        }
        if (not $server or not $port) {
            error("Server and port must be provided.");
        }
        if (not @supported_versions) {
            push @supported_versions, 2;
        }

        my $client =
            APNIC::RPKI::RTR::Client->new(
                supported_versions => \@supported_versions,
                server             => $server,
                port               => $port,
                tcp_md5_key        => $tcp_md5_key,
                ca_file            => $ca_file,
                cert_file          => $cert_file,
                key_file           => $key_file,
                ssh_key            => $ssh_key,
                known_hosts        => $known_hosts,
                data_types         => \@data_types,
                ($strict)
                    ? (strict_send    => 1,
                       strict_receive => 1)
                    : ()
            );

        my $client_json = $client->serialise_json();
        write_file("$dir/client.json", $client_json);

        return 1;
    } elsif ($op_name eq 'reset') {
        my $client_json = read_file("$dir/client.json");
        my $client =
            APNIC::RPKI::RTR::Client->deserialise_json($client_json);
        my $force = grep { $_ eq '--force' } @args;
        $client->reset($force);
        $client_json = $client->serialise_json();
        write_file("$dir/client.json", $client_json);
        return 1;
    } elsif ($op_name eq 'refresh') {
        my $client_json = read_file("$dir/client.json");
        my $client =
            APNIC::RPKI::RTR::Client->deserialise_json($client_json);
        my $force = grep { $_ eq '--force' } @args;
        my $persist = grep { $_ eq '--persist' } @args;
        if ($persist) {
            $client->refresh($force, $persist, undef, sub {
                $client_json = $client->serialise_json();
                write_file("$dir/client.json", $client_json);
            });
        } else {
            $client->refresh($force, $persist);
            $client_json = $client->serialise_json();
            write_file("$dir/client.json", $client_json);
        }
        return 1;
    } elsif ($op_name eq 'print') {
        my $client_json = read_file("$dir/client.json");
        my $client =
            APNIC::RPKI::RTR::Client->deserialise_json($client_json);
        print "Server:            ".$client->{'server'}."\n";
        print "Port:              ".$client->{'port'}."\n";
        my $last_run_dt;
        if (my $last_run = $client->{'last_run'}) {
            $last_run_dt = DateTime->from_epoch($last_run);
            print "Last run:          ".$last_run_dt->strftime('%F %T')."\n";
        } else {
            print "Last run:          N/A\n";
        }
        my $last_failure_dt;
        if (my $last_failure = $client->{'last_failure'}) {
            $last_failure_dt = DateTime->from_epoch($last_failure);
            print "Last failure:      ".$last_failure_dt->strftime("%F %T")."\n";
        } else {
            print "Last failure:      N/A\n";
        }
        if (my $eod = $client->{'eod'}) {
            my $ri  = $eod->refresh_interval();
            my $rti = $eod->retry_interval();
            my $exi = $eod->expire_interval();
            print "Refresh interval:  $ri\n";
            if ($last_run_dt) {
                print "Next refresh time: ".$last_run_dt->clone()->add(seconds => $ri)->strftime('%F %T')."\n";
            } else {
                print "Next refresh time: N/A\n";
            }
            print "Retry interval:    $rti\n";
            if ($last_failure_dt) {
                print "Next retry time:   ".$last_failure_dt->clone()->add(seconds => $rti)->strftime('%F %T')."\n";
            } else {
                print "Next retry time:   N/A\n";
            }
            print "Expire interval:   $exi\n";
            if ($last_run_dt) {
                print "Expiry time:       ".$last_run_dt->clone()->add(seconds => $exi)->strftime('%F %T')."\n";
            } else {
                print "Expiry time:       N/A\n";
            }
        } else {
            print "Refresh interval:  N/A\n";
            print "Retry interval:    N/A\n";
            print "Expire interval:   N/A\n";
        }
        if (my $state = $client->{'state'}) {
            my @pdus = $state->pdus();
            print "State:\n";
            for my $pdu (@pdus) {
                my $type_str = $pdu->type_str();
                if (($pdu->type() == PDU_IPV4_PREFIX())
                        or ($pdu->type() == PDU_IPV6_PREFIX())) {
                    my $str = $pdu->address()."/".
                              $pdu->prefix_length()."-".
                              $pdu->max_length()." => ".
                              "AS".$pdu->asn();
                    print " - $type_str: $str\n";
                } elsif ($pdu->type() == PDU_ASPA()) {
                    my $customer_asn = $pdu->customer_asn();
                    my @provider_asns = @{$pdu->provider_asns()};
                    my $str = "AS$customer_asn => ".
                              (join ', ',
                               map { "AS$_" } @provider_asns);
                    print " - $type_str: $str\n";
                }
            }
        } else {
            print "No state available\n";
        }
    } elsif ($op_name eq 'aspa-validation') {
        my $client_json = read_file("$dir/client.json");
        my $client =
            APNIC::RPKI::RTR::Client->deserialise_json($client_json);

        my $announcement;
        my $provider_asn_str;
        while (@args) {
            my $key = shift @args;
            if ($key eq '--announcement') {
                $announcement = shift @args;
            } elsif ($key eq '--provider-asns') {
                $provider_asn_str = shift @args;
            } else {
                error("Invalid argument '$key'");
            }
        }
        if (not $announcement or not $provider_asn_str) {
            error("Announcement and provider ASNs must be provided.");
        }

        my %provider_asns =
            map { $_ => 1 }
                split /,/, $provider_asn_str;

        my $state = $client->{'state'};
        my $res = APNIC::RPKI::Validator::ASPA::validate(
            $state, \%provider_asns, $announcement
        );
        if ($res == 2) {
            print "Valid\n";
        } elsif ($res == 1) {
            print "Unknown\n";
        } else {
            print "Invalid\n";
        }
    } elsif ($op_name eq 'route-origin-validation') {
        my $client_json = read_file("$dir/client.json");
        my $client =
            APNIC::RPKI::RTR::Client->deserialise_json($client_json);

        my $asn;
        my $prefix;

        while (@args) {
            my $key = shift @args;
            if ($key eq '--asn') {
                $asn = shift @args;
            } elsif ($key eq '--prefix') {
                $prefix = shift @args;
            } else {
                error("Invalid argument '$key'");
            }
        }
        if (not $asn or not $prefix) {
            error("ASN and prefix must be provided.");
        }

        my $state = $client->{'state'};
        my $res =
            APNIC::RPKI::Validator::ROA->validate($state, $asn, $prefix);

        if ($res == ROV_UNKNOWN) {
            print "Unknown\n";
        } elsif ($res == ROV_INVALID) {
            print "Invalid\n";
        } else {
            print "Valid\n";
        }

    } else {
        error("Unknown operation name '$op_name'");
    }
}

main(@ARGV);

1;
